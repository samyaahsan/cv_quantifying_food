# -*- coding: utf-8 -*-
"""fiber_detection.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1hUTHogfDKt-RZ6rPownMIgK9M9nxF9ZX
"""

import cv2
from google.colab.patches import cv2_imshow
import imutils
import numpy as np 

def work():
  #read image
  img = cv2.imread('Sirloin-1-C.jpg')
  imgResized = cv2.resize(img, (960, 540))
  #cv2_imshow(imgResized)

  #channel splitting
  blue, green, red = cv2.split(img)
  #cv2_imshow(green)

  #binarize green component w/ thresholding
  retval, dst	=	cv2.threshold(green, 145, 255, cv2.THRESH_TOZERO)
  #cv2_imshow(dst)
  #retval, dst	=	cv2.threshold(dst, 100, 255, cv2.THRESH_TOZERO_INV)
  #cv2_imshow(dst)

  #contouring
  contours, hierarchy = cv2.findContours(dst, cv2.RETR_TREE, cv2.CHAIN_APPROX_NONE)
  mask = np.zeros(img.shape[:2], dtype=img.dtype)

  # draw all contours larger than 1000 on the mask
  for c in contours:
      if cv2.contourArea(c) > 1000:
          x, y, w, h = cv2.boundingRect(c)
          cv2.drawContours(mask, [c], 0, (255), -1)
          cv2.drawContours(img, [c], 0, (255), 3)

  maskResized = cv2.resize(mask, (960, 540)) 
  #cv2_imshow(maskResized)
  # apply the mask to the original image
  #result = cv2.bitwise_and(img,img, mask= mask)
  #cv2_imshow(result)
  #cv2_imshow(image)

  #cv2_imshow(maskResized)

  img_out_Resized = cv2.resize(img, (3298, 3691))
  cv2_imshow(img_out_Resized)

  cv2.waitKey(0)
  cv2.destroyAllWindows()   

  #final = cv2.drawContours(img, contours, -1, (0,0,0), 3)
  #cv2_imshow(final)


if __name__ == '__main__':
    work()